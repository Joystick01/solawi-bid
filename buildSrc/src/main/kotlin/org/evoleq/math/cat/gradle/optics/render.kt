package org.evoleq.math.cat.gradle.optics

import java.io.File

val defaultImports by lazy { listOf(
    "import org.evoleq.optics.Lensify",
    "import org.evoleq.optics.lens.Lens"
) }

val modifierImports by lazy {  listOf(
    "import org.evoleq.optics.ReadOnly",
    "import org.evoleq.optics.ReadWrite",
    "import org.evoleq.optics.Ignore",
)}



fun ClassDescriptor.writeToFile(root: String) {

    val imports = renderImports()
    val clazz = renderClass("", "    ")
    val optics = renderOptics()

    val result = """
        |// This file has been auto generated. 
        |// Please don't make any changes.
        |package $targetPackage
        |
        |$imports
        |
        |$clazz
        |
        |$optics
        |
    """.trimMargin()

    val file = File(root+"/"+targetPackage.replace(".", "/")+"/"+ name + ".kt")

    file.writeText(result)
}

fun ClassDescriptor.renderImports(): String {
    val result: List<String> = listOf(
        *defaultImports.toTypedArray(),
        *modifierImports.filter {importStatement ->
            properties.map { m -> m.modifier.toString().drop(1) }.any{importStatement.endsWith(it)}
        }.toTypedArray()
    )
    return result.joinToString("\n") { it }
}

fun ClassDescriptor.renderClass(offset: String, indent: String): String = """
    |${renderComment()}
    |${optic} data class $name (
    |${properties.joinToString(",\n") { it.renderProperty(offset, indent)}}
    |)
""".trimMargin()

fun PropertyDescriptor.renderProperty(offset: String, indent: String): String = """
    |$offset$indent$modifier val $name: $type${ if( default != null ){" = $default" } else{ "" }}
""".trimMargin()

fun ClassDescriptor.renderComment() = """
    |/**
    | * Autogenerated class.
    | */
""".trimMargin()





// create read only lens
fun readOnlyLens(lensDescriptor: LensDescriptor): String = """val ${lensDescriptor.focusName}: Lens<${lensDescriptor.type}, ${lensDescriptor.focusType}> by lazy{ Lens(
    |    get = {whole -> whole.${lensDescriptor.focusName}},
    |    set = {{it}}
    |) }""".trimMargin()
// create read write lens
fun readWriteLens(lensDescriptor: LensDescriptor): String = """val ${lensDescriptor.focusName}: Lens<${lensDescriptor.type}, ${lensDescriptor.focusType}> by lazy{ Lens(
    |    get = {whole -> whole.${lensDescriptor.focusName}},
    |    set = {part -> {whole -> whole.copy(${lensDescriptor.focusName} = part)}}
    |) }""".trimMargin()

fun String.commentReadWriteLens(lensDescriptor: LensDescriptor) = """
    |/**
    | * Autogenerated Lens.
    | * Read and manipulate [${lensDescriptor.type}.${lensDescriptor.focusName}]
    | */
    | @ReadWrite $this
""".trimMargin()

fun String.commentReadOnlyLens(lensDescriptor: LensDescriptor) = """
    |/**
    | * Autogenerated ReadOnly Lens.
    | * Read [${lensDescriptor.type}.${lensDescriptor.focusName}]
    | */
    | @ReadOnly $this
""".trimMargin()

fun ClassDescriptor.renderOptics(): String  {
    val typeOfTheWhole = Type(name)

    val members: List<String> =
        properties.filterNot{
            item -> item.name.startsWith("${Modifier.Ignore}")
    }.map{ item: PropertyDescriptor ->

        LensDescriptor(
            type = typeOfTheWhole.name,
            modifier = item.modifier,
            focusName = item.name,
            focusType = item.type
        )
    }.map{
            lensDescriptor -> when(lensDescriptor.modifier) {
        is Modifier.Ignore -> ""
        is Modifier.ReadOnly -> readOnlyLens(lensDescriptor).commentReadOnlyLens(lensDescriptor)
        is Modifier.ReadWrite -> readWriteLens(lensDescriptor).commentReadWriteLens(lensDescriptor)
    }
    }
    return members.joinToString("\n") { it }
}