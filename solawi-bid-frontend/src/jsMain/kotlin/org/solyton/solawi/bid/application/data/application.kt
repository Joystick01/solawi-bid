// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.application.data

import kotlinx.coroutines.flow.MutableSharedFlow
import org.evoleq.compose.modal.Modals
import org.evoleq.ktorx.api.Api
import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.evoleq.optics.storage.Action
import org.solyton.solawi.bid.api.solawiApi
import org.solyton.solawi.bid.application.data.env.Environment
import org.solyton.solawi.bid.module.i18n.data.I18N
import org.solyton.solawi.bid.module.user.User

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Application (
    @ReadOnly val environment: Environment,
    @ReadOnly val api: Api = solawiApi,
    @ReadOnly val actions: MutableSharedFlow<Action<Application, *, *>> = MutableSharedFlow(),
    @ReadWrite val modals: Modals<Int> = mapOf(),
    @ReadWrite val i18N: I18N = I18N(),
    @ReadWrite val isCookieDisclaimerConfirmed: Boolean = false,
    @ReadWrite val userData: User = User("","","",""),
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.environment]
 */
 @ReadOnly val environment: Lens<Application, Environment> by lazy{ Lens(
    get = {whole -> whole.environment},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.api]
 */
 @ReadOnly val api: Lens<Application, Api> by lazy{ Lens(
    get = {whole -> whole.api},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [Application.actions]
 */
 @ReadOnly val actions: Lens<Application, MutableSharedFlow<Action<Application, *, *>>> by lazy{ Lens(
    get = {whole -> whole.actions},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.modals]
 */
 @ReadWrite val modals: Lens<Application, Modals<Int>> by lazy{ Lens(
    get = {whole -> whole.modals},
    set = {part -> {whole -> whole.copy(modals = part)}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.i18N]
 */
 @ReadWrite val i18N: Lens<Application, I18N> by lazy{ Lens(
    get = {whole -> whole.i18N},
    set = {part -> {whole -> whole.copy(i18N = part)}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.isCookieDisclaimerConfirmed]
 */
 @ReadWrite val isCookieDisclaimerConfirmed: Lens<Application, Boolean> by lazy{ Lens(
    get = {whole -> whole.isCookieDisclaimerConfirmed},
    set = {part -> {whole -> whole.copy(isCookieDisclaimerConfirmed = part)}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.userData]
 */
 @ReadWrite val userData: Lens<Application, User> by lazy{ Lens(
    get = {whole -> whole.userData},
    set = {part -> {whole -> whole.copy(userData = part)}}
) }
