// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.bid.data

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class BidRound(
    @ReadOnly val bidRoundId: String,
    @ReadWrite val round: Round,
    @ReadWrite val auction: Auction,
    @ReadWrite val amount: Double?
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [BidRound.bidRoundId]
 */
@ReadOnly val bidRoundId: Lens<BidRound, String> by lazy{ Lens(
    get = {whole -> whole.bidRoundId},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.round]
 */
@ReadWrite val round: Lens<BidRound, Round> by lazy{ Lens(
    get = {whole -> whole.round},
    set = {part -> {whole -> whole.copy(round = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.round]
 */
@ReadWrite fun BidRound.round(set: Round.()->Round ): BidRound = copy(round = set(round)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.auction]
 */
@ReadWrite val auction: Lens<BidRound, Auction> by lazy{ Lens(
    get = {whole -> whole.auction},
    set = {part -> {whole -> whole.copy(auction = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.auction]
 */
@ReadWrite fun BidRound.auction(set: Auction.()->Auction ): BidRound = copy(auction = set(auction)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.amount]
 */
@ReadWrite val amount: Lens<BidRound, Double?> by lazy{ Lens(
    get = {whole -> whole.amount},
    set = {part -> {whole -> whole.copy(amount = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.amount]
 */
@ReadWrite fun BidRound.amount(set: Double?.()->Double? ): BidRound = copy(amount = set(amount)) 
