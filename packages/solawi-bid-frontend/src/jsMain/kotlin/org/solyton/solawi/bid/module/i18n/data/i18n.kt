// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.i18n.data

import org.evoleq.language.Lang
import org.evoleq.language.LangComponent
import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class I18N(
    @ReadWrite val locale: String = "de",
    @ReadWrite val locales: List<String> = listOf(),
    @ReadWrite val language: Lang = Lang.Block("", listOf()),
    @ReadWrite val loadedComponents: List<LangComponent> = listOf()
)

/**
 * Autogenerated Lens.
 * Read and manipulate [I18N.locale]
 */
@ReadWrite val locale: Lens<I18N, String> by lazy{ Lens(
    get = {whole -> whole.locale},
    set = {part -> {whole -> whole.copy(locale = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [I18N.locale]
 */
@ReadWrite fun I18N.locale(set: String.()->String ): I18N = copy(locale = set(locale)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [I18N.locales]
 */
@ReadWrite val locales: Lens<I18N, List<String>> by lazy{ Lens(
    get = {whole -> whole.locales},
    set = {part -> {whole -> whole.copy(locales = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [I18N.locales]
 */
@ReadWrite fun I18N.locales(set: List<String>.()->List<String> ): I18N = copy(locales = set(locales)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [I18N.language]
 */
@ReadWrite val language: Lens<I18N, Lang> by lazy{ Lens(
    get = {whole -> whole.language},
    set = {part -> {whole -> whole.copy(language = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [I18N.language]
 */
@ReadWrite fun I18N.language(set: Lang.()->Lang ): I18N = copy(language = set(language)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [I18N.loadedComponents]
 */
@ReadWrite val loadedComponents: Lens<I18N, List<LangComponent>> by lazy{ Lens(
    get = {whole -> whole.loadedComponents},
    set = {part -> {whole -> whole.copy(loadedComponents = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [I18N.loadedComponents]
 */
@ReadWrite fun I18N.loadedComponents(set: List<LangComponent>.()->List<LangComponent> ): I18N = copy(loadedComponents = set(loadedComponents)) 
